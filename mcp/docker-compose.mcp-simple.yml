services:
  # Simple Python-based mock MCP servers for demo
  mock-yahoo-finance-mcp:
    image: python:3.11-slim
    container_name: mock-yahoo-finance-mcp
    ports:
      - "3001:3000"
    environment:
      - PYTHONUNBUFFERED=1
    command: |
      bash -c "pip install fastapi uvicorn && python -c '
from fastapi import FastAPI, Request
from datetime import datetime
import random

app = FastAPI()

@app.post(\"/\")
async def handle_jsonrpc(request: Request):
    body = await request.json()
    method = body.get(\"method\")
    params = body.get(\"params\", {})
    request_id = body.get(\"id\")
    
    if method == \"initialize\":
        return {
            \"jsonrpc\": \"2.0\",
            \"id\": request_id,
            \"result\": {
                \"protocolVersion\": \"2024-11-05\",
                \"capabilities\": {\"tools\": {}, \"resources\": {}}
            }
        }
    elif method == \"tools/list\":
        return {
            \"jsonrpc\": \"2.0\",
            \"id\": request_id,
            \"result\": {
                \"tools\": [
                    {
                        \"name\": \"getStockQuote\",
                        \"description\": \"Get stock quote\",
                        \"inputSchema\": {\"type\": \"object\"}
                    }
                ]
            }
        }
    elif method == \"tools/call\":
        tool_name = params.get(\"name\")
        symbol = params.get(\"arguments\", {}).get(\"symbol\", \"UNKNOWN\")
        price = round(random.uniform(100, 200), 2)
        
        return {
            \"jsonrpc\": \"2.0\",
            \"id\": request_id,
            \"result\": {
                \"content\": [{
                    \"type\": \"text\",
                    \"text\": f\"{{\\\"symbol\\\": \\\"{symbol}\\\", \\\"price\\\": {price}, \\\"time\\\": \\\"{datetime.now().isoformat()}\\\"}}\"
                }]
            }
        }
    
    return {\"jsonrpc\": \"2.0\", \"id\": request_id, \"error\": {\"code\": -32601, \"message\": \"Method not found\"}}

if __name__ == \"__main__\":
    import uvicorn
    uvicorn.run(app, host=\"0.0.0.0\", port=3000)
'"
    networks:
      - a2a-network

  mock-alpha-vantage-mcp:
    image: python:3.11-slim
    container_name: mock-alpha-vantage-mcp
    ports:
      - "3002:3000"
    environment:
      - PYTHONUNBUFFERED=1
    command: |
      bash -c "pip install fastapi uvicorn && python -c '
from fastapi import FastAPI, Request
from datetime import datetime
import random

app = FastAPI()

@app.post(\"/\")
async def handle_jsonrpc(request: Request):
    body = await request.json()
    method = body.get(\"method\")
    params = body.get(\"params\", {})
    request_id = body.get(\"id\")
    
    if method == \"initialize\":
        return {
            \"jsonrpc\": \"2.0\",
            \"id\": request_id,
            \"result\": {
                \"protocolVersion\": \"2024-11-05\",
                \"capabilities\": {\"tools\": {}, \"resources\": {}}
            }
        }
    elif method == \"tools/list\":
        return {
            \"jsonrpc\": \"2.0\",
            \"id\": request_id,
            \"result\": {
                \"tools\": [
                    {
                        \"name\": \"QUOTE_ENDPOINT\",
                        \"description\": \"Get real-time quote\",
                        \"inputSchema\": {\"type\": \"object\"}
                    },
                    {
                        \"name\": \"RSI\",
                        \"description\": \"Get RSI indicator\",
                        \"inputSchema\": {\"type\": \"object\"}
                    }
                ]
            }
        }
    elif method == \"tools/call\":
        tool_name = params.get(\"name\")
        symbol = params.get(\"arguments\", {}).get(\"symbol\", \"UNKNOWN\")
        
        if tool_name == \"QUOTE_ENDPOINT\":
            price = round(random.uniform(100, 300), 2)
            result = f\"{{\\\"symbol\\\": \\\"{symbol}\\\", \\\"price\\\": {price}, \\\"change\\\": {round(random.uniform(-5, 5), 2)}}}\"
        elif tool_name == \"RSI\":
            rsi = round(random.uniform(30, 70), 2)
            result = f\"{{\\\"symbol\\\": \\\"{symbol}\\\", \\\"RSI\\\": {rsi}, \\\"signal\\\": \\\"{'oversold' if rsi < 30 else 'overbought' if rsi > 70 else 'neutral'}\\\"}}\"
        else:
            result = \"{{\\\"error\\\": \\\"Unknown tool\\\"}}\"
        
        return {
            \"jsonrpc\": \"2.0\",
            \"id\": request_id,
            \"result\": {
                \"content\": [{
                    \"type\": \"text\",
                    \"text\": result
                }]
            }
        }
    
    return {\"jsonrpc\": \"2.0\", \"id\": request_id, \"error\": {\"code\": -32601, \"message\": \"Method not found\"}}

if __name__ == \"__main__\":
    import uvicorn
    uvicorn.run(app, host=\"0.0.0.0\", port=3000)
'"
    networks:
      - a2a-network

  # A2A MCP Yahoo Finance Agent
  mcp-yahoo-finance-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-yahoo-finance-agent
    command: python agents/mcp_yahoo_finance_agent.py
    ports:
      - "8213:8213"
    environment:
      - YAHOO_FINANCE_MCP_URL=http://mock-yahoo-finance-mcp:3000
      - PYTHONUNBUFFERED=1
    depends_on:
      - mock-yahoo-finance-mcp
    networks:
      - a2a-network

  # A2A MCP Alpha Vantage Agent
  mcp-alpha-vantage-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-alpha-vantage-agent
    command: python agents/mcp_alpha_vantage_agent.py
    ports:
      - "8214:8214"
    environment:
      - ALPHA_VANTAGE_MCP_URL=http://mock-alpha-vantage-mcp:3000
      - PYTHONUNBUFFERED=1
    depends_on:
      - mock-alpha-vantage-mcp
    networks:
      - a2a-network

networks:
  a2a-network:
    external: true
    name: a2a-network